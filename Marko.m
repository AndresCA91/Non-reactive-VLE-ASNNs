function [Y,Xf,Af] = Marko(X,~,~)
%MARKO neural network simulation function.
%
% Auto-generated by MATLAB, 24-May-2022 16:22:44.
% 
% [Y] = Marko(X,~,~) takes these arguments:
% 
%   X = 4xTS cell, 4 inputs over TS timesteps
%   Each X{1,ts} = 2xQ matrix, input #1 at timestep ts.
%   Each X{2,ts} = 2xQ matrix, input #2 at timestep ts.
%   Each X{3,ts} = 1xQ matrix, input #3 at timestep ts.
%   Each X{4,ts} = 1xQ matrix, input #4 at timestep ts.
% 
% and returns:
%   Y = 4xTS cell of 4 outputs over TS timesteps.
%   Each Y{1,ts} = 2xQ matrix, output #1 at timestep ts.
%   Each Y{2,ts} = 1xQ matrix, output #2 at timestep ts.
%   Each Y{3,ts} = 2xQ matrix, output #3 at timestep ts.
%   Each Y{4,ts} = 1xQ matrix, output #4 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Layer 1
LW1_25 = [0.38880880845594534279 -0.064674376407246450538;0.17231088832203031447 0.35662203273379883273;-0.29316168641470458089 0.29827345550794326368;-0.11738013002243480321 0.047585933700580757];
LW1_26 = [1 0 0 0;0 1 0 0;0 0 1 0;0 0 0 1];

% Layer 2
LW2_1 = [1 0 0 0;0 1 0 0;0 0 1 0;0 0 0 1];
LW2_26 = [1 0 0 0;0 1 0 0;0 0 1 0;0 0 0 1];

% Layer 3
IW3_1 = [1 0;1 0;0 1;0 1];
LW3_1 = [1 0 0 0;0 1 0 0;0 0 1 0;0 0 0 1];

% Layer 4
LW4_3 = [1 0 1 0;0 1 0 1];

% Layer 5
IW5_1 = [1 0;1 0;0 1;0 1];
LW5_2 = [1 0 0 0;0 1 0 0;0 0 1 0;0 0 0 1];

% Layer 6
LW6_5 = [1 0 1 0;0 1 0 1];

% Layer 7
LW7_4 = [1 0;0 1];

% Layer 8
LW8_6 = [1 0;0 1];
LW8_7 = [1 0;0 1];

% Layer 9
LW9_7 = [1 0;0 1];

% Layer 10
LW10_1 = [1 0 0 0;0 0 1 0;0 1 0 0;0 0 0 1];
LW10_6 = [1 0;1 0;0 1;0 1];

% Layer 11
LW11_2 = [1 0 0 0;0 0 1 0;0 1 0 0;0 0 0 1];
LW11_4 = [1 0;1 0;0 1;0 1];

% Layer 12
LW12_10 = [-1 0 0 0;0 -1 0 0;0 0 -1 0;0 0 0 -1];
LW12_11 = [1 0 0 0;0 1 0 0;0 0 1 0;0 0 0 1];

% Layer 13
IW13_1 = [1 0;1 0;0 1;0 1];
LW13_7 = [1 0;1 0;0 1;0 1];
LW13_9 = [1 0;1 0;0 1;0 1];
LW13_12 = [1 0 0 0;0 1 0 0;0 0 1 0;0 0 0 1];

% Layer 14
LW14_8 = [1 0;0 1];
LW14_13 = [1 0 1 0;0 1 0 1];

% Layer 15
IW15_1 = [1 0;0 1];
IW15_2 = [1 0;0 1];
LW15_14 = [1 0;0 1];

% Layer 16
LW16_15 = [1 1];

% Layer 17
LW17_15 = [1 0;0 1];
LW17_16 = [1;1];

% Layer 18
LW18_3 = [1 0 0 0;0 1 0 0;0 0 1 0;0 0 0 1];
LW18_7 = [1 0;0 1;1 0;0 1];
LW18_27 = [1 0 0 0;0 1 0 0;0 0 1 0;0 0 0 1];

% Layer 19
LW19_5 = [1 0 0 0;0 1 0 0;0 0 1 0;0 0 0 1];
LW19_7 = [1 0;0 1;1 0;0 1];
LW19_25 = [-0.2492342012011317387 0.09183128124020102645;0.35807924886307712642 0.38989381144089702014;0.17599384348929211774 0.15350788275199148125;0.3807842440473527823 -0.17954057223643390961];

% Layer 20
LW20_19 = [1 0 0 0;0 1 0 0;0 0 1 0;0 0 0 1];
LW20_27 = [1 0 0 0;0 1 0 0;0 0 1 0;0 0 0 1];

% Layer 21
LW21_18 = [1 0 1 0;0 1 0 1];
LW21_19 = [1 0 1 0;0 1 0 1];

% Layer 22
LW22_18 = [1 0 1 0;0 1 0 1];
LW22_20 = [-1 0 -1 0;0 -1 0 -1];
LW22_21 = [1 0;0 1];

% Layer 23
IW23_1 = [1 0;0 1];
LW23_22 = [1 0;0 1];

% Layer 24
LW24_23 = [1 1];

% Layer 25
b25 = [-0.3171627834674629054;-0.45841808276876228057];

% Layer 26
LW26_31 = [0 0;1 0;0 1;0 0];
LW26_36 = [1 0 0 0 1 0 0 0;0 1 0 0 0 1 0 0;0 0 1 0 0 0 1 0;0 0 0 1 0 0 0 1];

% Layer 27
LW27_38 = [1 0 0 0 1 0 0 0;0 1 0 0 0 1 0 0;0 0 1 0 0 0 1 0;0 0 0 1 0 0 0 1];

% Layer 28
b28 = [-0.63369750723106466062;-1.1872689521657877609;-0.074269011076023377926;-0.57474604232552384264];

% Layer 29
b29 = [0.23166582993737769303;0.85499121933849975274;-0.66976987082303662824;0.17998606583905113476];

% Layer 30
b30 = [1.0750210965214972436;1.6452860327513727512;0.090825027340730071779;2.5603514035342982424];

% Layer 31
b31 = [-0.39351911320686888685;0.36004486396472551446];

% Layer 32
IW32_3 = [1;1;1;1;1;1;1;1];
LW32_29 = [0 0 0 0;1 0 0 0;0 1 0 0;0 0 0 0;0 0 0 0;0 0 1 0;0 0 0 1;0 0 0 0];

% Layer 33
IW33_4 = [1;1;1;1;1;1;1;1];
LW33_29 = [0 0 0 0;1 0 0 0;0 1 0 0;0 0 0 0;0 0 0 0;0 0 1 0;0 0 0 1;0 0 0 0];

% Layer 34
LW34_28 = [0 0 0 0;1 0 0 0;0 1 0 0;0 0 0 0;0 0 0 0;0 0 1 0;0 0 0 1;0 0 0 0];
LW34_32 = [1 0 0 0 0 0 0 0;0 1 0 0 0 0 0 0;0 0 1 0 0 0 0 0;0 0 0 1 0 0 0 0;0 0 0 0 1 0 0 0;0 0 0 0 0 1 0 0;0 0 0 0 0 0 1 0;0 0 0 0 0 0 0 1];

% Layer 35
LW35_34 = [1 0 0 0 0 0 0 0;0 1 0 0 0 0 0 0;0 0 1 0 0 0 0 0;0 0 0 1 0 0 0 0;0 0 0 0 1 0 0 0;0 0 0 0 0 1 0 0;0 0 0 0 0 0 1 0;0 0 0 0 0 0 0 1];

% Layer 36
LW36_30 = [0 0 0 0;1 0 0 0;0 1 0 0;0 0 0 0;0 0 0 0;0 0 1 0;0 0 0 1;0 0 0 0];
LW36_35 = [1 0 0 0 0 0 0 0;0 1 0 0 0 0 0 0;0 0 1 0 0 0 0 0;0 0 0 1 0 0 0 0;0 0 0 0 1 0 0 0;0 0 0 0 0 1 0 0;0 0 0 0 0 0 1 0;0 0 0 0 0 0 0 1];

% Layer 37
LW37_34 = [1 0 0 0 0 0 0 0;0 1 0 0 0 0 0 0;0 0 1 0 0 0 0 0;0 0 0 1 0 0 0 0;0 0 0 0 1 0 0 0;0 0 0 0 0 1 0 0;0 0 0 0 0 0 1 0;0 0 0 0 0 0 0 1];

% Layer 38
LW38_30 = [0 0 0 0;1 0 0 0;0 1 0 0;0 0 0 0;0 0 0 0;0 0 1 0;0 0 0 1;0 0 0 0];
LW38_33 = [1 0 0 0 0 0 0 0;0 1 0 0 0 0 0 0;0 0 1 0 0 0 0 0;0 0 0 1 0 0 0 0;0 0 0 0 1 0 0 0;0 0 0 0 0 1 0 0;0 0 0 0 0 0 1 0;0 0 0 0 0 0 0 1];
LW38_37 = [1 0 0 0 0 0 0 0;0 1 0 0 0 0 0 0;0 0 1 0 0 0 0 0;0 0 0 1 0 0 0 0;0 0 0 0 1 0 0 0;0 0 0 0 0 1 0 0;0 0 0 0 0 0 1 0;0 0 0 0 0 0 0 1];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(4,TS);

% Time loop
for ts=1:TS

    % Input 1
    % no processing
    
    % Input 2
    % no processing
    
    % Input 3
    % no processing
    
    % Input 4
    % no processing
    
    % Layer 25
    a25 = absf_apply(repmat(b25,1,Q));
    
    % Layer 28
    a28 = repmat(b28,1,Q);
    
    % Layer 29
    a29 = repmat(b29,1,Q);
    
    % Layer 30
    a30 = repmat(b30,1,Q);
    
    % Layer 31
    a31 = repmat(b31,1,Q);
    
    % Layer 32
    a32 = (IW32_3*X{3,ts}) .* (LW32_29*a29);
    
    % Layer 33
    a33 = (IW33_4*X{4,ts}) .* (LW33_29*a29);
    
    % Layer 34
    a34 = LW34_28*a28 + LW34_32*a32;
    
    % Layer 35
    a35 = tansig_apply(LW35_34*a34);
    
    % Layer 36
    a36 = (LW36_30*a30) .* (LW36_35*a35);
    
    % Layer 26
    a26 = LW26_31*a31 + LW26_36*a36;
    
    % Layer 1
    a1 = expf_apply((LW1_25*a25) .* (LW1_26*a26));
    
    % Layer 2
    a2 = (LW2_1*a1) .* (LW2_26*a26);
    
    % Layer 3
    a3 = (IW3_1*X{1,ts}) .* (LW3_1*a1);
    
    % Layer 4
    a4 = LW4_3*a3;
    
    % Layer 5
    a5 = (IW5_1*X{1,ts}) .* (LW5_2*a2);
    
    % Layer 6
    a6 = LW6_5*a5;
    
    % Layer 7
    a7 = netinv_apply(LW7_4*a4);
    
    % Layer 8
    a8 = (LW8_6*a6) .* (LW8_7*a7);
    
    % Layer 9
    a9 = LW9_7*a7;
    
    % Layer 10
    a10 = (LW10_1*a1) .* (LW10_6*a6);
    
    % Layer 11
    a11 = (LW11_2*a2) .* (LW11_4*a4);
    
    % Layer 12
    a12 = LW12_10*a10 + LW12_11*a11;
    
    % Layer 13
    a13 = (IW13_1*X{1,ts}) .* (LW13_7*a7) .* (LW13_9*a9) .* (LW13_12*a12);
    
    % Layer 14
    a14 = expf_apply(LW14_8*a8 + LW14_13*a13);
    
    % Layer 15
    a15 = (IW15_1*X{1,ts}) .* (IW15_2*X{2,ts}) .* (LW15_14*a14);
    
    % Layer 16
    a16 = netinv_apply(LW16_15*a15);
    
    % Layer 17
    a17 = (LW17_15*a15) .* (LW17_16*a16);
    
    % Layer 19
    a19 = (LW19_5*a5) .* (LW19_7*a7) .* (LW19_25*a25);
    
    % Layer 37
    a37 = tansigd_apply(LW37_34*a34);
    
    % Layer 38
    a38 = (LW38_30*a30) .* (LW38_33*a33) .* (LW38_37*a37);
    
    % Layer 27
    a27 = LW27_38*a38;
    
    % Layer 18
    a18 = (LW18_3*a3) .* (LW18_7*a7) .* (LW18_27*a27);
    
    % Layer 20
    a20 = (LW20_19*a19) .* (LW20_27*a27);
    
    % Layer 21
    a21 = (LW21_18*a18) .* (LW21_19*a19);
    
    % Layer 22
    a22 = LW22_18*a18 + LW22_20*a20 + LW22_21*a21;
    
    % Layer 23
    a23 = (IW23_1*X{1,ts}) .* (LW23_22*a22);
    
    % Layer 24
    a24 = LW24_23*a23;
    
    % Output 1
    Y{1,ts} = a15;
    
    % Output 2
    Y{2,ts} = a16;
    
    % Output 3
    Y{3,ts} = a17;
    
    % Output 4
    Y{4,ts} = a24;
end

% Final Delay States
Xf = cell(4,0);
Af = cell(38,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% logf Transfer Function
function a = absf_apply(n,~)
  a = abs(n);
end

% logf Transfer Function
function a = expf_apply(n,~)
  a = exp((n));
end

% Inverse Transfer Function
function a = netinv_apply(n,~)
  a = 1./n;
  zero = (n == 0);
  a(zero) = 2e30;
  small = find((abs(n)<=1e-30) & ~zero);
  nSmall = n(small);
  a(small) = 2e30*sign(nSmall) - 1e60*nSmall;
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Sigmoid Symmetric Transfer Function
function a = tansigd_apply(n,~)
  a = sech(n).^2;
end
